<!DOCTYPE html>
<html lang="tr">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>
    <%= group.name %> - Grup Sohbeti
  </title>
  <link rel="stylesheet" href="/css/style.css">
  <style>
    .chat-container {
      width: 80%;
      margin: 0 auto;
      padding: 20px;
      background-color: #f9f9f9;
      border-radius: 10px;
    }

    .chat-header {
      text-align: center;
      margin-bottom: 20px;
    }

    .group-details {
      margin-bottom: 20px;
      padding: 15px;
      background-color: #e9ecef;
      border-radius: 10px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .messages {
      max-height: 400px;
      overflow-y: scroll;
      margin-bottom: 20px;
    }

    .message {
      margin-bottom: 10px;
    }

    .message strong {
      color: #0056b3;
    }

    #messageInput {
      width: 100%;
      height: 100px;
      padding: 10px;
      margin-bottom: 10px;
    }

    button {
      padding: 10px 15px;
      background-color: #28a745;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }

    button:hover {
      background-color: #218838;
    }

.group-details {
    margin-bottom: 20px;
    padding: 25px;
    background: linear-gradient(135deg, #fdfbfb, #ebedee);
    border-radius: 15px;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    color: #333;
    position: relative;
    overflow: hidden;
  }

  /* Arka planda hafif bir desen efekti */
  .group-details::before {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: radial-gradient(circle at center, rgba(0,86,179,0.1), transparent);
    transform: rotate(45deg);
    z-index: 0;
  }

  /* Grup detayları içeriğini arka plan efekti üzerine getirme */
  .group-details > * {
    position: relative;
    z-index: 1;
  }

  .group-details h3 {
    margin-top: 0;
    color: #0056b3;
    font-size: 1.7em;
    border-bottom: 2px solid #0056b3;
    padding-bottom: 10px;
  }

  .group-details p {
    font-size: 1em;
    line-height: 1.6;
    margin: 15px 0;
  }

  .group-details ul {
    list-style: none;
    padding: 0;
    margin: 15px 0;
  }

  .group-details li {
    margin-bottom: 8px;
    padding-left: 25px;
    position: relative;
  }

  .group-details li::before {
    content: '✔';
    position: absolute;
    left: 0;
    color: #03dac6;
    font-weight: bold;
  }


  


  </style>
</head>

<body>
  <%- include('./inc/navbar2') %>
    <div class="chat-container">
      <!-- Grup detayları kartı -->
      <div class="group-details" id="groupDetails">
        <p>Grup detayları yükleniyor...</p>
      </div>

      <div class="chat-header">
        <h2>
          <%= group.name %> - Grup Sohbeti
        </h2>
      </div>
      <div class="messages" id="messages">
        <!-- Mesajlar burada görünecek -->
        <% group.messages.forEach(function (message) { %>
          <div class="message">
            <strong>
              <%= message.sender %>:
            </strong>
            <p>
              <%= message.message %>
            </p>
          </div>
          <% }); %>
      </div>

      <!-- Mesaj Gönderme Formu -->

      <div class="bottom">

        <form id="messageForm">
          <textarea id="messageInput" placeholder="Mesajınızı yazın..." required></textarea>
          <button type="submit">Gönder</button>
        </form>
  
        <form id="addUserForm">
          <input type="text" id="addUserInput" placeholder="Kullanıcı Adı" required>
          <button type="submit">Kullanıcıyı gruba ekle</button>
        </form>
      </div>
  

      </div>

   
    <script src="/socket.io/socket.io.js"></script>

    <script>
      // Grup detaylarını yükleme
      const loadGroupDetails = async () => {
        try {
          const groupId = '<%= group._id %>';
          const response = await fetch(`/group/details?groupId=${groupId}`);
          if (!response.ok) {
            console.error('Grup detayları alınırken hata:', response.statusText);
            return;
          }

          const data = await response.json();
          if (!data.success) {
            console.error('Grup bulunamadı:', data.message);
            return;
          }

          const group = data.group;

          // Grup detaylarını göster
          const groupDetails = document.getElementById('groupDetails');
          groupDetails.innerHTML = `
          <h3>Grup: ${group.name}</h3>
          <p><strong>Admin:</strong> ${group.admin.username} (${group.admin.email})</p>
          <p><strong>Üyeler:</strong></p>
          <ul>
            ${group.members.map(member => `<li>${member.username} (${member.email})</li>`).join('')}
          </ul>
          <p><strong>Oluşturulma Tarihi:</strong> ${new Date(group.createdAt).toLocaleString()}</p>
          <p><strong>Son Güncelleme:</strong> ${new Date(group.updatedAt).toLocaleString()}</p>
          <p><strong>Son Mesaj:</strong> ${group.lastMessage}</p>
        `;
        } catch (error) {
          console.error('Grup detayları alınırken hata oluştu:', error);
        }
      };

      // Sayfa yüklendiğinde grup detaylarını yükle
      window.onload = loadGroupDetails;

      // Socket.IO bağlantısı
      const socket = io();

      socket.emit('join_group', '<%= group._id %>');

      // Mesaj gönderme işlemi
      const messageForm = document.getElementById('messageForm');
      const messageInput = document.getElementById('messageInput');

      messageForm.addEventListener('submit', async (event) => {
        event.preventDefault();
        const username = '<%= user.username %>';
        const message = messageInput.value;
        if (message.trim()) {
          const response = await fetch('/groups/<%= group._id %>/send', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              message: message,
            }),
          });

          if (!response.ok) {
            console.error('Mesaj gönderme hatası:', response.statusText);
            return;
          }

          socket.emit('send_group_message', {
            groupId: '<%= group._id %>',
            message: message,
            sender: username,
          });
          messageInput.value = ''; // Mesaj inputunu temizle
        }
      });

      socket.on('new_message', (data) => {
        const messagesContainer = document.getElementById('messages');
        const newMessage = document.createElement('div');
        newMessage.classList.add('message');
        newMessage.innerHTML = `<strong>${data.sender}:</strong><p>${data.message}</p>`;
        messagesContainer.appendChild(newMessage);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
      });

      const addUserForm = document.getElementById('addUserForm');
      addUserForm.addEventListener('submit', async (event) => {
        event.preventDefault();
        console.log('Kullanıcı ekleme formu gönderildi');
        const addUserInput = document.getElementById('addUserInput');
        const usernameToAdd = addUserInput.value;

        if (usernameToAdd.trim()) {
          const response = await fetch('/group/add-user', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              groupId: '<%= group._id %>',
              newMemberUsername: usernameToAdd,
            }),
          });

          if (!response.ok) {
            console.log(await response.json());
            console.error('Kullanıcı ekleme hatası:', response.statusText);
            return;
          }

          // Kullanıcı eklendi mesajı
          alert('Kullanıcı başarıyla gruba eklendi!');
          addUserInput.value = ''; // Kullanıcı adı inputunu temizle
          loadGroupDetails();
        }
      });
    </script>
</body>

</html>